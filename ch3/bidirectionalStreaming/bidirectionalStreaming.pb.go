// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bidirectionalStreaming.proto

package bidirectionalStreaming

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TextMessage struct {
	Day                  string   `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMessage) Reset()         { *m = TextMessage{} }
func (m *TextMessage) String() string { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()    {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0ab0767fb346dd0, []int{0}
}

func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextMessage.Unmarshal(m, b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return xxx_messageInfo_TextMessage.Size(m)
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *TextMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CompleteConversation struct {
	TextMessages         []*TextMessage `protobuf:"bytes,1,rep,name=textMessages,proto3" json:"textMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CompleteConversation) Reset()         { *m = CompleteConversation{} }
func (m *CompleteConversation) String() string { return proto.CompactTextString(m) }
func (*CompleteConversation) ProtoMessage()    {}
func (*CompleteConversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0ab0767fb346dd0, []int{1}
}

func (m *CompleteConversation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompleteConversation.Unmarshal(m, b)
}
func (m *CompleteConversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompleteConversation.Marshal(b, m, deterministic)
}
func (m *CompleteConversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteConversation.Merge(m, src)
}
func (m *CompleteConversation) XXX_Size() int {
	return xxx_messageInfo_CompleteConversation.Size(m)
}
func (m *CompleteConversation) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteConversation.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteConversation proto.InternalMessageInfo

func (m *CompleteConversation) GetTextMessages() []*TextMessage {
	if m != nil {
		return m.TextMessages
	}
	return nil
}

func init() {
	proto.RegisterType((*TextMessage)(nil), "TextMessage")
	proto.RegisterType((*CompleteConversation)(nil), "CompleteConversation")
}

func init() { proto.RegisterFile("bidirectionalStreaming.proto", fileDescriptor_d0ab0767fb346dd0) }

var fileDescriptor_d0ab0767fb346dd0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xca, 0x4c, 0xc9,
	0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x4b, 0xcc, 0x09, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd,
	0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe5, 0xe2, 0x0e, 0x49, 0xad, 0x28,
	0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe0, 0x62, 0x4e, 0x49, 0xac, 0x94, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53,
	0x25, 0x98, 0xc0, 0x62, 0x10, 0x8e, 0x92, 0x07, 0x97, 0x88, 0x73, 0x7e, 0x6e, 0x41, 0x4e, 0x6a,
	0x49, 0xaa, 0x73, 0x7e, 0x5e, 0x59, 0x6a, 0x51, 0x71, 0x22, 0xc8, 0x7c, 0x21, 0x03, 0x2e, 0x9e,
	0x12, 0x84, 0x71, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x3c, 0x7a, 0x48, 0x76, 0x04,
	0xa1, 0xa8, 0x30, 0xf2, 0x80, 0x38, 0x20, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x92,
	0x8b, 0x2f, 0xa0, 0x28, 0x3f, 0xa5, 0x34, 0x39, 0x15, 0xe6, 0x24, 0x14, 0xcd, 0x52, 0xa2, 0x7a,
	0xd8, 0xec, 0xd5, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0xfb, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x90, 0x38, 0xe8, 0xaf, 0xf1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TextServiceClient is the client API for TextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TextServiceClient interface {
	ProduceMessage(ctx context.Context, opts ...grpc.CallOption) (TextService_ProduceMessageClient, error)
}

type textServiceClient struct {
	cc *grpc.ClientConn
}

func NewTextServiceClient(cc *grpc.ClientConn) TextServiceClient {
	return &textServiceClient{cc}
}

func (c *textServiceClient) ProduceMessage(ctx context.Context, opts ...grpc.CallOption) (TextService_ProduceMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TextService_serviceDesc.Streams[0], "/TextService/ProduceMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &textServiceProduceMessageClient{stream}
	return x, nil
}

type TextService_ProduceMessageClient interface {
	Send(*TextMessage) error
	Recv() (*CompleteConversation, error)
	grpc.ClientStream
}

type textServiceProduceMessageClient struct {
	grpc.ClientStream
}

func (x *textServiceProduceMessageClient) Send(m *TextMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textServiceProduceMessageClient) Recv() (*CompleteConversation, error) {
	m := new(CompleteConversation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextServiceServer is the server API for TextService service.
type TextServiceServer interface {
	ProduceMessage(TextService_ProduceMessageServer) error
}

// UnimplementedTextServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTextServiceServer struct {
}

func (*UnimplementedTextServiceServer) ProduceMessage(srv TextService_ProduceMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ProduceMessage not implemented")
}

func RegisterTextServiceServer(s *grpc.Server, srv TextServiceServer) {
	s.RegisterService(&_TextService_serviceDesc, srv)
}

func _TextService_ProduceMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextServiceServer).ProduceMessage(&textServiceProduceMessageServer{stream})
}

type TextService_ProduceMessageServer interface {
	Send(*CompleteConversation) error
	Recv() (*TextMessage, error)
	grpc.ServerStream
}

type textServiceProduceMessageServer struct {
	grpc.ServerStream
}

func (x *textServiceProduceMessageServer) Send(m *CompleteConversation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textServiceProduceMessageServer) Recv() (*TextMessage, error) {
	m := new(TextMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TextService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TextService",
	HandlerType: (*TextServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProduceMessage",
			Handler:       _TextService_ProduceMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectionalStreaming.proto",
}
