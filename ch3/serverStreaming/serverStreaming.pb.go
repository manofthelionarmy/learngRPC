// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverStreaming.proto

package serverStreaming

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnimeId struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnimeId) Reset()         { *m = AnimeId{} }
func (m *AnimeId) String() string { return proto.CompactTextString(m) }
func (*AnimeId) ProtoMessage()    {}
func (*AnimeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_58379bfad755eb25, []int{0}
}

func (m *AnimeId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnimeId.Unmarshal(m, b)
}
func (m *AnimeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnimeId.Marshal(b, m, deterministic)
}
func (m *AnimeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnimeId.Merge(m, src)
}
func (m *AnimeId) XXX_Size() int {
	return xxx_messageInfo_AnimeId.Size(m)
}
func (m *AnimeId) XXX_DiscardUnknown() {
	xxx_messageInfo_AnimeId.DiscardUnknown(m)
}

var xxx_messageInfo_AnimeId proto.InternalMessageInfo

func (m *AnimeId) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type Anime struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Anime) Reset()         { *m = Anime{} }
func (m *Anime) String() string { return proto.CompactTextString(m) }
func (*Anime) ProtoMessage()    {}
func (*Anime) Descriptor() ([]byte, []int) {
	return fileDescriptor_58379bfad755eb25, []int{1}
}

func (m *Anime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Anime.Unmarshal(m, b)
}
func (m *Anime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Anime.Marshal(b, m, deterministic)
}
func (m *Anime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Anime.Merge(m, src)
}
func (m *Anime) XXX_Size() int {
	return xxx_messageInfo_Anime.Size(m)
}
func (m *Anime) XXX_DiscardUnknown() {
	xxx_messageInfo_Anime.DiscardUnknown(m)
}

var xxx_messageInfo_Anime proto.InternalMessageInfo

func (m *Anime) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*AnimeId)(nil), "AnimeId")
	proto.RegisterType((*Anime)(nil), "Anime")
}

func init() { proto.RegisterFile("serverStreaming.proto", fileDescriptor_58379bfad755eb25) }

var fileDescriptor_58379bfad755eb25 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x0a, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x57, 0x92, 0xe6, 0x62, 0x77, 0xcc, 0xcb, 0xcc, 0x4d, 0xf5, 0x4c, 0x11, 0x12, 0xe0, 0x62,
	0x2e, 0x49, 0x4c, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x64, 0xb9, 0x58,
	0xc1, 0x92, 0x42, 0x22, 0x5c, 0xac, 0x25, 0x99, 0x25, 0x39, 0xa9, 0x50, 0x49, 0x08, 0xc7, 0xc8,
	0x84, 0x8b, 0x07, 0x2c, 0x1d, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0xa4, 0xc2, 0xc5, 0x97,
	0x9e, 0x5a, 0x02, 0x11, 0x02, 0x5b, 0x23, 0xc4, 0xa1, 0x07, 0x35, 0x5c, 0x8a, 0x0d, 0xc2, 0x32,
	0x60, 0x4c, 0x62, 0x03, 0x5b, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x28, 0x71, 0xc3, 0x05,
	0x91, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnimeServiceClient interface {
	GetAnimeStream(ctx context.Context, in *AnimeId, opts ...grpc.CallOption) (AnimeService_GetAnimeStreamClient, error)
}

type animeServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnimeServiceClient(cc *grpc.ClientConn) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) GetAnimeStream(ctx context.Context, in *AnimeId, opts ...grpc.CallOption) (AnimeService_GetAnimeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnimeService_serviceDesc.Streams[0], "/AnimeService/getAnimeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &animeServiceGetAnimeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnimeService_GetAnimeStreamClient interface {
	Recv() (*Anime, error)
	grpc.ClientStream
}

type animeServiceGetAnimeStreamClient struct {
	grpc.ClientStream
}

func (x *animeServiceGetAnimeStreamClient) Recv() (*Anime, error) {
	m := new(Anime)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnimeServiceServer is the server API for AnimeService service.
type AnimeServiceServer interface {
	GetAnimeStream(*AnimeId, AnimeService_GetAnimeStreamServer) error
}

// UnimplementedAnimeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnimeServiceServer struct {
}

func (*UnimplementedAnimeServiceServer) GetAnimeStream(req *AnimeId, srv AnimeService_GetAnimeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnimeStream not implemented")
}

func RegisterAnimeServiceServer(s *grpc.Server, srv AnimeServiceServer) {
	s.RegisterService(&_AnimeService_serviceDesc, srv)
}

func _AnimeService_GetAnimeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AnimeId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnimeServiceServer).GetAnimeStream(m, &animeServiceGetAnimeStreamServer{stream})
}

type AnimeService_GetAnimeStreamServer interface {
	Send(*Anime) error
	grpc.ServerStream
}

type animeServiceGetAnimeStreamServer struct {
	grpc.ServerStream
}

func (x *animeServiceGetAnimeStreamServer) Send(m *Anime) error {
	return x.ServerStream.SendMsg(m)
}

var _AnimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAnimeStream",
			Handler:       _AnimeService_GetAnimeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serverStreaming.proto",
}
