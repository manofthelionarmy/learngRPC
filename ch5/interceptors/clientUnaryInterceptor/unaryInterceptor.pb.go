// Code generated by protoc-gen-go. DO NOT EDIT.
// source: unaryInterceptor.proto

package unaryInterceptor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Pokemon struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pokemon) Reset()         { *m = Pokemon{} }
func (m *Pokemon) String() string { return proto.CompactTextString(m) }
func (*Pokemon) ProtoMessage()    {}
func (*Pokemon) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2e03fca922fe235, []int{0}
}

func (m *Pokemon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pokemon.Unmarshal(m, b)
}
func (m *Pokemon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pokemon.Marshal(b, m, deterministic)
}
func (m *Pokemon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pokemon.Merge(m, src)
}
func (m *Pokemon) XXX_Size() int {
	return xxx_messageInfo_Pokemon.Size(m)
}
func (m *Pokemon) XXX_DiscardUnknown() {
	xxx_messageInfo_Pokemon.DiscardUnknown(m)
}

var xxx_messageInfo_Pokemon proto.InternalMessageInfo

func (m *Pokemon) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pokemon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PokemonId struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PokemonId) Reset()         { *m = PokemonId{} }
func (m *PokemonId) String() string { return proto.CompactTextString(m) }
func (*PokemonId) ProtoMessage()    {}
func (*PokemonId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2e03fca922fe235, []int{1}
}

func (m *PokemonId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PokemonId.Unmarshal(m, b)
}
func (m *PokemonId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PokemonId.Marshal(b, m, deterministic)
}
func (m *PokemonId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokemonId.Merge(m, src)
}
func (m *PokemonId) XXX_Size() int {
	return xxx_messageInfo_PokemonId.Size(m)
}
func (m *PokemonId) XXX_DiscardUnknown() {
	xxx_messageInfo_PokemonId.DiscardUnknown(m)
}

var xxx_messageInfo_PokemonId proto.InternalMessageInfo

func (m *PokemonId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Pokemon)(nil), "Pokemon")
	proto.RegisterType((*PokemonId)(nil), "PokemonId")
}

func init() { proto.RegisterFile("unaryInterceptor.proto", fileDescriptor_f2e03fca922fe235) }

var fileDescriptor_f2e03fca922fe235 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xcd, 0x4b, 0x2c,
	0xaa, 0xf4, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4e, 0x2d, 0x28, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x57, 0xd2, 0xe5, 0x62, 0x0f, 0xc8, 0xcf, 0x4e, 0xcd, 0xcd, 0xcf, 0x13, 0xe2, 0xe3,
	0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe2,
	0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xa4,
	0xb9, 0x38, 0xa1, 0xca, 0x3d, 0x53, 0x90, 0x34, 0xb0, 0x82, 0x34, 0x18, 0x99, 0x70, 0xf1, 0x41,
	0x25, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x94, 0xb8, 0xb8, 0x12, 0x53, 0x52, 0x60,
	0x16, 0x70, 0xe8, 0x41, 0x59, 0x52, 0x5c, 0x7a, 0x70, 0x53, 0x92, 0xd8, 0xc0, 0x0e, 0x31, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x81, 0x84, 0x3a, 0x75, 0xa2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PokemonServiceClient is the client API for PokemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokemonServiceClient interface {
	AddPokemon(ctx context.Context, in *Pokemon, opts ...grpc.CallOption) (*PokemonId, error)
}

type pokemonServiceClient struct {
	cc *grpc.ClientConn
}

func NewPokemonServiceClient(cc *grpc.ClientConn) PokemonServiceClient {
	return &pokemonServiceClient{cc}
}

func (c *pokemonServiceClient) AddPokemon(ctx context.Context, in *Pokemon, opts ...grpc.CallOption) (*PokemonId, error) {
	out := new(PokemonId)
	err := c.cc.Invoke(ctx, "/PokemonService/addPokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokemonServiceServer is the server API for PokemonService service.
type PokemonServiceServer interface {
	AddPokemon(context.Context, *Pokemon) (*PokemonId, error)
}

// UnimplementedPokemonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPokemonServiceServer struct {
}

func (*UnimplementedPokemonServiceServer) AddPokemon(ctx context.Context, req *Pokemon) (*PokemonId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPokemon not implemented")
}

func RegisterPokemonServiceServer(s *grpc.Server, srv PokemonServiceServer) {
	s.RegisterService(&_PokemonService_serviceDesc, srv)
}

func _PokemonService_AddPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pokemon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).AddPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PokemonService/AddPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).AddPokemon(ctx, req.(*Pokemon))
	}
	return interceptor(ctx, in, info, handler)
}

var _PokemonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PokemonService",
	HandlerType: (*PokemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addPokemon",
			Handler:    _PokemonService_AddPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unaryInterceptor.proto",
}
